events {
    worker_connections 1024;
}

http {
    map $authz $id_token {
        default "";
        "~^Bearer\s+(.+)$" $1;
    }

    # 空文字なら "-" にする（見やすさ用）
    map $email $email_safe {
        ""      "-";
        default $email;
    }
    map $user $user_safe {
        ""      "-";
        default $user;
    }

    log_format json escape=json
      '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"bytes":$body_bytes_sent,'
        '"referer":"$http_referer",'
        '"ua":"$http_user_agent",'
        '"req_time":$request_time,'
        '"up_resp_time":"$upstream_response_time",'
        '"user":"$user_safe",'
        '"email":"$email_safe",'
        '"req_id":"$request_id"'
      '}';


    server {
        listen 80;
        server_name _;

        access_log  /dev/stdout json;
        error_log   /dev/stderr warn;

        location / {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;

            # pass information via X-User and X-Email headers to backend,
            # requires running with --set-xauthrequest flag
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            proxy_set_header X-User  $user;
            proxy_set_header X-Email $email;

            auth_request_set $authz $upstream_http_authorization;
            proxy_set_header X-Id-Token $id_token;
    
            # if you enabled --pass-access-token, this will pass the token to the backend
            auth_request_set $access_token $upstream_http_x_auth_request_access_token;
            proxy_set_header X-Access-Token $access_token;

            # if you enabled --cookie-refresh, this is needed for it to work with auth_request
            auth_request_set $auth_cookie $upstream_http_set_cookie;
            add_header Set-Cookie $auth_cookie;

            # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
            # limit and so the OAuth2 Proxy splits these into multiple parts.
            # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
            # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
            auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

            # Extract the Cookie attributes from the first Set-Cookie header and append them
            # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
            if ($auth_cookie ~* "(; .*)") {
                set $auth_cookie_name_0 $auth_cookie;
                set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
            }

            # Send both Set-Cookie headers now if there was a second part
            if ($auth_cookie_name_upstream_1) {
                add_header Set-Cookie $auth_cookie_name_0;
                add_header Set-Cookie $auth_cookie_name_1;
            }

            #proxy_pass http://httpbin;
            proxy_pass http://app:3000;

            #add_header Content-Type text/plain;
            #return 200 "Hello from Nginx! ";
        }

        location = /oauth2/sign_out {
            proxy_pass http://oauth2-proxy:4180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Uri $request_uri;
        }

        location /oauth2/ {
           proxy_pass http://oauth2-proxy:4180;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Scheme $scheme;
           proxy_set_header X-Auth-Request-Redirect $request_uri;
        }

        location /oauth2/auth {
            proxy_pass http://oauth2-proxy:4180;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Content-Length "";
            proxy_pass_request_body off;
        }

    }
}